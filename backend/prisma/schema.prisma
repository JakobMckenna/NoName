// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
    previewFeatures = ["referentialIntegrity"]

 
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           Int             @id @default(autoincrement())
  email        String          @unique
  name         String
  userPassword UserPassword?
  task         Task[]          @relation("createdBy")
  assignedTask Task[]          @relation("assignedTo")
  note         ResearchNote[]
  project      Project[]
  chat         Chat[]
  member       ProjectMember[]
}

model UserPassword {
  userID   Int     @id
  password String?
  user     User    @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)

 

  @@index([userID])
}

model Project {
  id      String          @id @default(cuid())
  name    String
  userId  Int //created by this user
  sprint  Sprint[]
  github  GithubProject?
  members ProjectMember[]
  chat    Chat[]
  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([name, userId])
  @@index([userId])
}

model Sprint {
  id        String         @id @default(cuid())
  projectID String
  name      String
  start     DateTime?
  deadline  DateTime
  project   Project        @relation(fields: [projectID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  task      Task[]
  note      ResearchNote[]

  @@index([projectID])
}

model ProjectMember {
  id        String  @id @default(cuid())
  projectID String
  user      User[]
  project   Project @relation(fields: [projectID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([projectID])
}

model GithubProject {
  id        String  @id @default(cuid())
  owner     String
  repoName  String
  projectID String  @unique
  project   Project @relation(fields: [projectID], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Task {
  id           String   @id @default(cuid())
  name         String
  details      String?
  deadline     DateTime
  createdBy    Int
  assignedTo   Int
  completed    Boolean
  sprintID     String
  sprint       Sprint   @relation(fields: [sprintID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user         User     @relation("createdBy", fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assignedUser User     @relation("assignedTo", fields: [assignedTo], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([sprintID])
  @@index([createdBy])
  @@index([assignedTo])
}

model ResearchNote {
  id           String    @id @default(cuid())
  title        String
  details      String
  userID       Int //created by this user
  link         WebLink[]
  sprintID     String
  created      DateTime  @default(now())
  lastModified DateTime  @updatedAt
  user         User      @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sprint       Sprint    @relation(fields: [sprintID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userID])
  @@index([sprintID])
}

model WebLink {
  id      String       @id @default(cuid())
  url     String
  details String?
  noteID  String
  Note    ResearchNote @relation(fields: [noteID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([noteID])
}

model Chat {
  id        String  @id @default(cuid())
  message   String
  userID    Int
  projectID String
  timestamp DateTime @default(now())
  project   Project @relation(fields: [projectID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User    @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([projectID])
  @@index([userID])
}
